# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rqrcode/all/rqrcode.rbi
#
# rqrcode-0.10.1
module RQRCode
end
module RQRCode::CoreExtensions
end
module RQRCode::CoreExtensions::Array
end
module RQRCode::CoreExtensions::Array::Behavior
  def extract_options!; end
end
class Array
  include RQRCode::CoreExtensions::Array::Behavior
end
module RQRCode::CoreExtensions::Integer
end
module RQRCode::CoreExtensions::Integer::Bitwise
  def rszf(count); end
end
class Integer < Numeric
  include RQRCode::CoreExtensions::Integer::Bitwise
end
class RQRCode::QR8bitByte
  def get_length; end
  def initialize(data); end
  def mode; end
  def write(buffer); end
end
class RQRCode::QRAlphanumeric
  def get_length; end
  def initialize(data); end
  def mode; end
  def self.valid_data?(data); end
  def write(buffer); end
end
class RQRCode::QRBitBuffer
  def alphanumeric_encoding_start(length); end
  def buffer; end
  def byte_encoding_start(length); end
  def end_of_message(max_data_bits); end
  def get(index); end
  def get_length_in_bits; end
  def initialize(version); end
  def numeric_encoding_start(length); end
  def pad_until(prefered_size); end
  def put(num, length); end
  def put_bit(bit); end
end
class RQRCode::QRCodeArgumentError < ArgumentError
end
class RQRCode::QRCodeRunTimeError < RuntimeError
end
class RQRCode::QRCode
  def dark?(row, col); end
  def error_correction_level; end
  def get_best_mask_pattern; end
  def initialize(string, *args); end
  def is_dark(row, col); end
  def make; end
  def make_impl(test, mask_pattern); end
  def map_data(data, mask_pattern); end
  def mode; end
  def module_count; end
  def modules; end
  def place_format_info(test, mask_pattern); end
  def place_position_adjust_pattern; end
  def place_position_probe_pattern(row, col); end
  def place_timing_pattern; end
  def place_version_info(test); end
  def prepare_common_patterns; end
  def self.count_max_data_bits(rs_blocks); end
  def self.create_bytes(buffer, rs_blocks); end
  def self.create_data(version, error_correct_level, data_list); end
  def smallest_size_for(string, max_size_array); end
  def to_s(*args); end
  def version; end
  include RQRCode::Export::ANSI
  include RQRCode::Export::HTML
  include RQRCode::Export::PNG
  include RQRCode::Export::SVG
end
class RQRCode::QRMath
  def self.gexp(n); end
  def self.glog(n); end
end
class RQRCode::QRNumeric
  def get_bit_length(length); end
  def get_code(chars); end
  def get_length; end
  def initialize(data); end
  def mode; end
  def self.valid_data?(data); end
  def write(buffer); end
end
class RQRCode::QRPolynomial
  def get(index); end
  def get_length; end
  def initialize(num, shift); end
  def mod(e); end
  def multiply(e); end
end
class RQRCode::QRRSBlock
  def data_count; end
  def initialize(total_count, data_count); end
  def self.get_rs_block_table(version, error_correct_level); end
  def self.get_rs_blocks(version, error_correct_level); end
  def total_count; end
end
class RQRCode::QRUtil
  def self.demerit_points_1_same_color(modules); end
  def self.demerit_points_2_full_blocks(modules); end
  def self.demerit_points_3_dangerous_patterns(modules); end
  def self.demerit_points_4_dark_ratio(modules); end
  def self.get_bch_digit(data); end
  def self.get_bch_format_info(data); end
  def self.get_bch_version(data); end
  def self.get_error_correct_polynomial(error_correct_length); end
  def self.get_length_in_bits(mode, version); end
  def self.get_lost_points(modules); end
  def self.get_mask(mask_pattern, i, j); end
  def self.get_pattern_positions(version); end
  def self.max_size; end
end
module RQRCode::Export
end
module RQRCode::Export::PNG
  def as_png(options = nil); end
end
module RQRCode::Export::SVG
  def as_svg(options = nil); end
end
module RQRCode::Export::HTML
  def as_html; end
  def rows; end
end
class Anonymous_Struct_1 < Struct
  def qr; end
  def qr=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class RQRCode::Export::HTML::Rows < Anonymous_Struct_1
  def as_html; end
  def rows; end
end
class Anonymous_Struct_2 < Struct
  def qr; end
  def qr=(_); end
  def qr_module; end
  def qr_module=(_); end
  def row_index; end
  def row_index=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class RQRCode::Export::HTML::Row < Anonymous_Struct_2
  def as_html; end
  def cells; end
end
class Anonymous_Struct_3 < Struct
  def col_index; end
  def col_index=(_); end
  def qr; end
  def qr=(_); end
  def row_index; end
  def row_index=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class RQRCode::Export::HTML::Cell < Anonymous_Struct_3
  def as_html; end
  def dark?; end
  def html_class; end
end
module RQRCode::Export::ANSI
  def as_ansi(options = nil); end
end
