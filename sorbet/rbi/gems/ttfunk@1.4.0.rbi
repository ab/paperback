# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ttfunk` gem.
# Please instead update this file by running `bin/tapioca gem ttfunk`.

# source://ttfunk//lib/ttfunk/directory.rb#1
module TTFunk; end

# source://ttfunk//lib/ttfunk/directory.rb#2
class TTFunk::Directory
  # @return [Directory] a new instance of Directory
  #
  # source://ttfunk//lib/ttfunk/directory.rb#6
  def initialize(io); end

  # Returns the value of attribute scaler_type.
  #
  # source://ttfunk//lib/ttfunk/directory.rb#4
  def scaler_type; end

  # Returns the value of attribute tables.
  #
  # source://ttfunk//lib/ttfunk/directory.rb#3
  def tables; end
end

# source://ttfunk//lib/ttfunk/encoding/mac_roman.rb#2
module TTFunk::Encoding; end

# source://ttfunk//lib/ttfunk/encoding/mac_roman.rb#3
class TTFunk::Encoding::MacRoman
  class << self
    # @return [Boolean]
    #
    # source://ttfunk//lib/ttfunk/encoding/mac_roman.rb#61
    def covers?(character); end

    # source://ttfunk//lib/ttfunk/encoding/mac_roman.rb#77
    def from_unicode(string); end

    # source://ttfunk//lib/ttfunk/encoding/mac_roman.rb#85
    def from_unicode_codepoints(array); end

    # source://ttfunk//lib/ttfunk/encoding/mac_roman.rb#73
    def from_utf8(string); end

    # source://ttfunk//lib/ttfunk/encoding/mac_roman.rb#69
    def to_unicode(string); end

    # source://ttfunk//lib/ttfunk/encoding/mac_roman.rb#81
    def to_unicode_codepoints(array); end

    # source://ttfunk//lib/ttfunk/encoding/mac_roman.rb#65
    def to_utf8(string); end
  end
end

# source://ttfunk//lib/ttfunk/encoding/mac_roman.rb#35
TTFunk::Encoding::MacRoman::FROM_UNICODE = T.let(T.unsafe(nil), Hash)

# Maps MacRoman codes to their corresponding index in the Postscript glyph
# table (see TTFunk::Table::Post::Format10). If any entry in this array is a string,
# it is a postscript glyph that is not in the standard list, and which should be
# emitted specially in the TTF postscript table ('post', see format 2).
#
# source://ttfunk//lib/ttfunk/encoding/mac_roman.rb#42
TTFunk::Encoding::MacRoman::POSTSCRIPT_GLYPH_MAPPING = T.let(T.unsafe(nil), Array)

# XXX: Ruby 1.9.2 on OS X Lion segfaults on range1.zip(range2)
#
# source://ttfunk//lib/ttfunk/encoding/mac_roman.rb#5
TTFunk::Encoding::MacRoman::TO_UNICODE = T.let(T.unsafe(nil), Hash)

# source://ttfunk//lib/ttfunk/encoding/windows_1252.rb#3
class TTFunk::Encoding::Windows1252
  class << self
    # @return [Boolean]
    #
    # source://ttfunk//lib/ttfunk/encoding/windows_1252.rb#41
    def covers?(character); end

    # source://ttfunk//lib/ttfunk/encoding/windows_1252.rb#57
    def from_unicode(string); end

    # source://ttfunk//lib/ttfunk/encoding/windows_1252.rb#65
    def from_unicode_codepoints(array); end

    # source://ttfunk//lib/ttfunk/encoding/windows_1252.rb#53
    def from_utf8(string); end

    # source://ttfunk//lib/ttfunk/encoding/windows_1252.rb#49
    def to_unicode(string); end

    # source://ttfunk//lib/ttfunk/encoding/windows_1252.rb#61
    def to_unicode_codepoints(array); end

    # source://ttfunk//lib/ttfunk/encoding/windows_1252.rb#45
    def to_utf8(string); end
  end
end

# source://ttfunk//lib/ttfunk/encoding/windows_1252.rb#15
TTFunk::Encoding::Windows1252::FROM_UNICODE = T.let(T.unsafe(nil), Hash)

# Maps Windows-1252 codes to their corresponding index in the Postscript glyph
# table (see TTFunk::Table::Post::Format10). If any entry in this array is a string,
# it is a postscript glyph that is not in the standard list, and which should be
# emitted specially in the TTF postscript table ('post', see format 2).
#
# source://ttfunk//lib/ttfunk/encoding/windows_1252.rb#22
TTFunk::Encoding::Windows1252::POSTSCRIPT_GLYPH_MAPPING = T.let(T.unsafe(nil), Array)

# XXX: Ruby 1.9.2 on OS X Lion segfaults on range1.zip(range2)
#
# source://ttfunk//lib/ttfunk/encoding/windows_1252.rb#5
TTFunk::Encoding::Windows1252::TO_UNICODE = T.let(T.unsafe(nil), Hash)

# source://ttfunk//lib/ttfunk.rb#8
class TTFunk::File
  # @return [File] a new instance of File
  #
  # source://ttfunk//lib/ttfunk.rb#39
  def initialize(contents); end

  # source://ttfunk//lib/ttfunk.rb#45
  def ascent; end

  # source://ttfunk//lib/ttfunk.rb#57
  def bbox; end

  # source://ttfunk//lib/ttfunk.rb#70
  def cmap; end

  # Returns the value of attribute contents.
  #
  # source://ttfunk//lib/ttfunk.rb#9
  def contents; end

  # source://ttfunk//lib/ttfunk.rb#49
  def descent; end

  # Returns the value of attribute directory.
  #
  # source://ttfunk//lib/ttfunk.rb#10
  def directory; end

  # source://ttfunk//lib/ttfunk.rb#62
  def directory_info(tag); end

  # source://ttfunk//lib/ttfunk.rb#102
  def glyph_locations; end

  # source://ttfunk//lib/ttfunk.rb#106
  def glyph_outlines; end

  # source://ttfunk//lib/ttfunk.rb#66
  def header; end

  # source://ttfunk//lib/ttfunk.rb#74
  def horizontal_header; end

  # source://ttfunk//lib/ttfunk.rb#78
  def horizontal_metrics; end

  # source://ttfunk//lib/ttfunk.rb#86
  def kerning; end

  # source://ttfunk//lib/ttfunk.rb#53
  def line_gap; end

  # source://ttfunk//lib/ttfunk.rb#82
  def maximum_profile; end

  # source://ttfunk//lib/ttfunk.rb#90
  def name; end

  # source://ttfunk//lib/ttfunk.rb#94
  def os2; end

  # source://ttfunk//lib/ttfunk.rb#98
  def postscript; end

  # source://ttfunk//lib/ttfunk.rb#110
  def sbix; end

  class << self
    # source://ttfunk//lib/ttfunk.rb#16
    def from_dfont(file, which = T.unsafe(nil)); end

    # source://ttfunk//lib/ttfunk.rb#12
    def open(io_or_path); end

    # @raise [ArgumentError]
    #
    # source://ttfunk//lib/ttfunk.rb#20
    def verify_and_open(io_or_path); end
  end
end

# source://ttfunk//lib/ttfunk/reader.rb#2
module TTFunk::Reader
  private

  # For debugging purposes
  #
  # source://ttfunk//lib/ttfunk/reader.rb#29
  def hexdump(string); end

  # source://ttfunk//lib/ttfunk/reader.rb#5
  def io; end

  # source://ttfunk//lib/ttfunk/reader.rb#21
  def parse_from(position); end

  # source://ttfunk//lib/ttfunk/reader.rb#9
  def read(bytes, format); end

  # source://ttfunk//lib/ttfunk/reader.rb#13
  def read_signed(count); end

  # source://ttfunk//lib/ttfunk/reader.rb#17
  def to_signed(n); end
end

# source://ttfunk//lib/ttfunk/resource_file.rb#2
class TTFunk::ResourceFile
  # @return [ResourceFile] a new instance of ResourceFile
  #
  # source://ttfunk//lib/ttfunk/resource_file.rb#12
  def initialize(io); end

  # source://ttfunk//lib/ttfunk/resource_file.rb#53
  def [](type, index = T.unsafe(nil)); end

  # Returns the value of attribute map.
  #
  # source://ttfunk//lib/ttfunk/resource_file.rb#3
  def map; end

  # source://ttfunk//lib/ttfunk/resource_file.rb#65
  def resources_for(type); end

  private

  # source://ttfunk//lib/ttfunk/resource_file.rb#71
  def parse_from(offset); end

  class << self
    # source://ttfunk//lib/ttfunk/resource_file.rb#5
    def open(path); end
  end
end

# source://ttfunk//lib/ttfunk/subset/base.rb#14
module TTFunk::Subset
  class << self
    # source://ttfunk//lib/ttfunk/subset.rb#8
    def for(original, encoding); end
  end
end

# source://ttfunk//lib/ttfunk/subset/base.rb#15
class TTFunk::Subset::Base
  # @return [Base] a new instance of Base
  #
  # source://ttfunk//lib/ttfunk/subset/base.rb#18
  def initialize(original); end

  # source://ttfunk//lib/ttfunk/subset/base.rb#30
  def encode(options = T.unsafe(nil)); end

  # Returns the value of attribute original.
  #
  # source://ttfunk//lib/ttfunk/subset/base.rb#16
  def original; end

  # source://ttfunk//lib/ttfunk/subset/base.rb#26
  def to_unicode_map; end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/subset/base.rb#22
  def unicode?; end

  private

  # source://ttfunk//lib/ttfunk/subset/base.rb#126
  def checksum(data); end

  # source://ttfunk//lib/ttfunk/subset/base.rb#131
  def collect_glyphs(glyph_ids); end

  # source://ttfunk//lib/ttfunk/subset/base.rb#122
  def unicode_cmap; end
end

# source://ttfunk//lib/ttfunk/subset/mac_roman.rb#8
class TTFunk::Subset::MacRoman < ::TTFunk::Subset::Base
  # @return [MacRoman] a new instance of MacRoman
  #
  # source://ttfunk//lib/ttfunk/subset/mac_roman.rb#9
  def initialize(original); end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/subset/mac_roman.rb#22
  def covers?(character); end

  # source://ttfunk//lib/ttfunk/subset/mac_roman.rb#31
  def from_unicode(character); end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/subset/mac_roman.rb#26
  def includes?(character); end

  # source://ttfunk//lib/ttfunk/subset/mac_roman.rb#14
  def to_unicode_map; end

  # source://ttfunk//lib/ttfunk/subset/mac_roman.rb#18
  def use(character); end

  protected

  # source://ttfunk//lib/ttfunk/subset/mac_roman.rb#37
  def new_cmap_table(options); end

  # source://ttfunk//lib/ttfunk/subset/mac_roman.rb#46
  def original_glyph_ids; end
end

# source://ttfunk//lib/ttfunk/subset/unicode.rb#6
class TTFunk::Subset::Unicode < ::TTFunk::Subset::Base
  # @return [Unicode] a new instance of Unicode
  #
  # source://ttfunk//lib/ttfunk/subset/unicode.rb#7
  def initialize(original); end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/subset/unicode.rb#24
  def covers?(character); end

  # source://ttfunk//lib/ttfunk/subset/unicode.rb#32
  def from_unicode(character); end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/subset/unicode.rb#28
  def includes?(character); end

  # source://ttfunk//lib/ttfunk/subset/unicode.rb#16
  def to_unicode_map; end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/subset/unicode.rb#12
  def unicode?; end

  # source://ttfunk//lib/ttfunk/subset/unicode.rb#20
  def use(character); end

  protected

  # source://ttfunk//lib/ttfunk/subset/unicode.rb#38
  def new_cmap_table(options); end

  # source://ttfunk//lib/ttfunk/subset/unicode.rb#43
  def original_glyph_ids; end
end

# source://ttfunk//lib/ttfunk/subset/unicode_8bit.rb#6
class TTFunk::Subset::Unicode8Bit < ::TTFunk::Subset::Base
  # @return [Unicode8Bit] a new instance of Unicode8Bit
  #
  # source://ttfunk//lib/ttfunk/subset/unicode_8bit.rb#7
  def initialize(original); end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/subset/unicode_8bit.rb#30
  def covers?(character); end

  # source://ttfunk//lib/ttfunk/subset/unicode_8bit.rb#38
  def from_unicode(character); end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/subset/unicode_8bit.rb#34
  def includes?(character); end

  # source://ttfunk//lib/ttfunk/subset/unicode_8bit.rb#18
  def to_unicode_map; end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/subset/unicode_8bit.rb#14
  def unicode?; end

  # source://ttfunk//lib/ttfunk/subset/unicode_8bit.rb#22
  def use(character); end

  protected

  # source://ttfunk//lib/ttfunk/subset/unicode_8bit.rb#44
  def new_cmap_table(options); end

  # source://ttfunk//lib/ttfunk/subset/unicode_8bit.rb#58
  def original_glyph_ids; end
end

# source://ttfunk//lib/ttfunk/subset/windows_1252.rb#8
class TTFunk::Subset::Windows1252 < ::TTFunk::Subset::Base
  # @return [Windows1252] a new instance of Windows1252
  #
  # source://ttfunk//lib/ttfunk/subset/windows_1252.rb#9
  def initialize(original); end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/subset/windows_1252.rb#22
  def covers?(character); end

  # source://ttfunk//lib/ttfunk/subset/windows_1252.rb#31
  def from_unicode(character); end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/subset/windows_1252.rb#26
  def includes?(character); end

  # source://ttfunk//lib/ttfunk/subset/windows_1252.rb#14
  def to_unicode_map; end

  # source://ttfunk//lib/ttfunk/subset/windows_1252.rb#18
  def use(character); end

  protected

  # source://ttfunk//lib/ttfunk/subset/windows_1252.rb#37
  def new_cmap_table(options); end

  # source://ttfunk//lib/ttfunk/subset/windows_1252.rb#51
  def original_glyph_ids; end
end

# source://ttfunk//lib/ttfunk/subset_collection.rb#4
class TTFunk::SubsetCollection
  # @return [SubsetCollection] a new instance of SubsetCollection
  #
  # source://ttfunk//lib/ttfunk/subset_collection.rb#5
  def initialize(original); end

  # source://ttfunk//lib/ttfunk/subset_collection.rb#10
  def [](subset); end

  # +characters+ should be an array of UTF-16 characters. Returns
  # an array of subset chunks, where each chunk is another array of
  # two elements. The first element is the subset number, and the
  # second element is the string of characters to render with that
  # font subset. The strings will be encoded for their subset font,
  # and so may not look (in the raw) like what was passed in, but
  # they will render correctly with the indicated subset font.
  #
  # source://ttfunk//lib/ttfunk/subset_collection.rb#40
  def encode(characters); end

  # +characters+ should be an array of UTF-16 characters
  #
  # source://ttfunk//lib/ttfunk/subset_collection.rb#15
  def use(characters); end
end

# source://ttfunk//lib/ttfunk/table/cmap.rb#2
class TTFunk::Table
  include ::TTFunk::Reader

  # @return [Table] a new instance of Table
  #
  # source://ttfunk//lib/ttfunk/table.rb#11
  def initialize(file); end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table.rb#24
  def exists?; end

  # Returns the value of attribute file.
  #
  # source://ttfunk//lib/ttfunk/table.rb#7
  def file; end

  # Returns the value of attribute length.
  #
  # source://ttfunk//lib/ttfunk/table.rb#9
  def length; end

  # Returns the value of attribute offset.
  #
  # source://ttfunk//lib/ttfunk/table.rb#8
  def offset; end

  # source://ttfunk//lib/ttfunk/table.rb#28
  def raw; end

  # source://ttfunk//lib/ttfunk/table.rb#36
  def tag; end

  private

  # source://ttfunk//lib/ttfunk/table.rb#42
  def parse!; end
end

# source://ttfunk//lib/ttfunk/table/cmap.rb#3
class TTFunk::Table::Cmap < ::TTFunk::Table
  # Returns the value of attribute tables.
  #
  # source://ttfunk//lib/ttfunk/table/cmap.rb#5
  def tables; end

  # source://ttfunk//lib/ttfunk/table/cmap.rb#15
  def unicode; end

  # Returns the value of attribute version.
  #
  # source://ttfunk//lib/ttfunk/table/cmap.rb#4
  def version; end

  private

  # source://ttfunk//lib/ttfunk/table/cmap.rb#24
  def parse!; end

  class << self
    # source://ttfunk//lib/ttfunk/table/cmap.rb#7
    def encode(charmap, encoding); end
  end
end

# source://ttfunk//lib/ttfunk/table/cmap/format00.rb#8
module TTFunk::Table::Cmap::Format00
  # source://ttfunk//lib/ttfunk/table/cmap/format00.rb#36
  def [](code); end

  # Returns the value of attribute code_map.
  #
  # source://ttfunk//lib/ttfunk/table/cmap/format00.rb#10
  def code_map; end

  # Returns the value of attribute language.
  #
  # source://ttfunk//lib/ttfunk/table/cmap/format00.rb#9
  def language; end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/cmap/format00.rb#40
  def supported?; end

  private

  # source://ttfunk//lib/ttfunk/table/cmap/format00.rb#46
  def parse_cmap!; end

  class << self
    # Expects a hash mapping character codes to glyph ids (where the
    # glyph ids are from the original font). Returns a hash including
    # a new map (:charmap) that maps the characters in charmap to a
    # another hash containing both the old (:old) and new (:new) glyph
    # ids. The returned hash also includes a :subtable key, which contains
    # the encoded subtable for the given charmap.
    #
    # source://ttfunk//lib/ttfunk/table/cmap/format00.rb#18
    def encode(charmap); end
  end
end

# source://ttfunk//lib/ttfunk/table/cmap/format04.rb#5
module TTFunk::Table::Cmap::Format04
  # source://ttfunk//lib/ttfunk/table/cmap/format04.rb#82
  def [](code); end

  # Returns the value of attribute code_map.
  #
  # source://ttfunk//lib/ttfunk/table/cmap/format04.rb#7
  def code_map; end

  # Returns the value of attribute language.
  #
  # source://ttfunk//lib/ttfunk/table/cmap/format04.rb#6
  def language; end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/cmap/format04.rb#86
  def supported?; end

  private

  # source://ttfunk//lib/ttfunk/table/cmap/format04.rb#92
  def parse_cmap!; end

  class << self
    # Expects a hash mapping character codes to glyph ids (where the
    # glyph ids are from the original font). Returns a hash including
    # a new map (:charmap) that maps the characters in charmap to a
    # another hash containing both the old (:old) and new (:new) glyph
    # ids. The returned hash also includes a :subtable key, which contains
    # the encoded subtable for the given charmap.
    #
    # source://ttfunk//lib/ttfunk/table/cmap/format04.rb#15
    def encode(charmap); end
  end
end

# source://ttfunk//lib/ttfunk/table/cmap/format06.rb#5
module TTFunk::Table::Cmap::Format06
  # source://ttfunk//lib/ttfunk/table/cmap/format06.rb#30
  def [](code); end

  # Returns the value of attribute code_map.
  #
  # source://ttfunk//lib/ttfunk/table/cmap/format06.rb#7
  def code_map; end

  # Returns the value of attribute language.
  #
  # source://ttfunk//lib/ttfunk/table/cmap/format06.rb#6
  def language; end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/cmap/format06.rb#34
  def supported?; end

  private

  # source://ttfunk//lib/ttfunk/table/cmap/format06.rb#39
  def parse_cmap!; end

  class << self
    # source://ttfunk//lib/ttfunk/table/cmap/format06.rb#9
    def encode(charmap); end
  end
end

# source://ttfunk//lib/ttfunk/table/cmap/format10.rb#5
module TTFunk::Table::Cmap::Format10
  # source://ttfunk//lib/ttfunk/table/cmap/format10.rb#30
  def [](code); end

  # Returns the value of attribute code_map.
  #
  # source://ttfunk//lib/ttfunk/table/cmap/format10.rb#7
  def code_map; end

  # Returns the value of attribute language.
  #
  # source://ttfunk//lib/ttfunk/table/cmap/format10.rb#6
  def language; end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/cmap/format10.rb#34
  def supported?; end

  private

  # @raise [NotImplementedError]
  #
  # source://ttfunk//lib/ttfunk/table/cmap/format10.rb#39
  def parse_cmap!; end

  class << self
    # source://ttfunk//lib/ttfunk/table/cmap/format10.rb#9
    def encode(charmap); end
  end
end

# source://ttfunk//lib/ttfunk/table/cmap/format12.rb#5
module TTFunk::Table::Cmap::Format12
  # source://ttfunk//lib/ttfunk/table/cmap/format12.rb#41
  def [](code); end

  # Returns the value of attribute code_map.
  #
  # source://ttfunk//lib/ttfunk/table/cmap/format12.rb#7
  def code_map; end

  # Returns the value of attribute language.
  #
  # source://ttfunk//lib/ttfunk/table/cmap/format12.rb#6
  def language; end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/cmap/format12.rb#45
  def supported?; end

  private

  # @raise [NotImplementedError]
  #
  # source://ttfunk//lib/ttfunk/table/cmap/format12.rb#50
  def parse_cmap!; end

  class << self
    # source://ttfunk//lib/ttfunk/table/cmap/format12.rb#9
    def encode(charmap); end
  end
end

# source://ttfunk//lib/ttfunk/table/cmap/subtable.rb#6
class TTFunk::Table::Cmap::Subtable
  include ::TTFunk::Reader

  # @return [Subtable] a new instance of Subtable
  #
  # source://ttfunk//lib/ttfunk/table/cmap/subtable.rb#41
  def initialize(file, table_start); end

  # @raise [NotImplementedError]
  #
  # source://ttfunk//lib/ttfunk/table/cmap/subtable.rb#70
  def [](code); end

  # Returns the value of attribute encoding_id.
  #
  # source://ttfunk//lib/ttfunk/table/cmap/subtable.rb#10
  def encoding_id; end

  # Returns the value of attribute format.
  #
  # source://ttfunk//lib/ttfunk/table/cmap/subtable.rb#11
  def format; end

  # Returns the value of attribute platform_id.
  #
  # source://ttfunk//lib/ttfunk/table/cmap/subtable.rb#9
  def platform_id; end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/cmap/subtable.rb#66
  def supported?; end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/cmap/subtable.rb#61
  def unicode?; end

  private

  # source://ttfunk//lib/ttfunk/table/cmap/subtable.rb#76
  def parse_cmap!; end

  class << self
    # source://ttfunk//lib/ttfunk/table/cmap/subtable.rb#20
    def encode(charmap, encoding); end
  end
end

# source://ttfunk//lib/ttfunk/table/cmap/subtable.rb#13
TTFunk::Table::Cmap::Subtable::ENCODING_MAPPINGS = T.let(T.unsafe(nil), Hash)

# source://ttfunk//lib/ttfunk/table/glyf.rb#13
class TTFunk::Table::Glyf < ::TTFunk::Table
  # source://ttfunk//lib/ttfunk/table/glyf.rb#29
  def for(glyph_id); end

  private

  # source://ttfunk//lib/ttfunk/table/glyf.rb#54
  def parse!; end

  class << self
    # Accepts a hash mapping (old) glyph-ids to glyph objects, and a hash
    # mapping old glyph-ids to new glyph-ids.
    #
    # Returns a hash containing:
    #
    # * :table - a string representing the encoded 'glyf' table containing
    #   the given glyphs.
    # * :offsets - an array of offsets for each glyph
    #
    # source://ttfunk//lib/ttfunk/table/glyf.rb#14
    def encode(glyphs, new2old, old2new); end
  end
end

# source://ttfunk//lib/ttfunk/table/glyf/compound.rb#6
class TTFunk::Table::Glyf::Compound
  include ::TTFunk::Reader

  # @return [Compound] a new instance of Compound
  #
  # source://ttfunk//lib/ttfunk/table/glyf/compound.rb#22
  def initialize(raw, x_min, y_min, x_max, y_max); end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/glyf/compound.rb#63
  def compound?; end

  # Returns the value of attribute glyph_ids.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/compound.rb#18
  def glyph_ids; end

  # Returns the value of attribute raw.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/compound.rb#16
  def raw; end

  # source://ttfunk//lib/ttfunk/table/glyf/compound.rb#67
  def recode(mapping); end

  # Returns the value of attribute x_max.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/compound.rb#17
  def x_max; end

  # Returns the value of attribute x_min.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/compound.rb#17
  def x_min; end

  # Returns the value of attribute y_max.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/compound.rb#17
  def y_max; end

  # Returns the value of attribute y_min.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/compound.rb#17
  def y_min; end
end

# source://ttfunk//lib/ttfunk/table/glyf/compound.rb#9
TTFunk::Table::Glyf::Compound::ARG_1_AND_2_ARE_WORDS = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/glyf/compound.rb#20
class TTFunk::Table::Glyf::Compound::Component < ::Struct
  # Returns the value of attribute arg1
  #
  # @return [Object] the current value of arg1
  def arg1; end

  # Sets the attribute arg1
  #
  # @param value [Object] the value to set the attribute arg1 to.
  # @return [Object] the newly set value
  def arg1=(_); end

  # Returns the value of attribute arg2
  #
  # @return [Object] the current value of arg2
  def arg2; end

  # Sets the attribute arg2
  #
  # @param value [Object] the value to set the attribute arg2 to.
  # @return [Object] the newly set value
  def arg2=(_); end

  # Returns the value of attribute flags
  #
  # @return [Object] the current value of flags
  def flags; end

  # Sets the attribute flags
  #
  # @param value [Object] the value to set the attribute flags to.
  # @return [Object] the newly set value
  def flags=(_); end

  # Returns the value of attribute glyph_index
  #
  # @return [Object] the current value of glyph_index
  def glyph_index; end

  # Sets the attribute glyph_index
  #
  # @param value [Object] the value to set the attribute glyph_index to.
  # @return [Object] the newly set value
  def glyph_index=(_); end

  # Returns the value of attribute transform
  #
  # @return [Object] the current value of transform
  def transform; end

  # Sets the attribute transform
  #
  # @param value [Object] the value to set the attribute transform to.
  # @return [Object] the newly set value
  def transform=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://ttfunk//lib/ttfunk/table/glyf/compound.rb#11
TTFunk::Table::Glyf::Compound::MORE_COMPONENTS = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/glyf/compound.rb#12
TTFunk::Table::Glyf::Compound::WE_HAVE_AN_X_AND_Y_SCALE = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/glyf/compound.rb#10
TTFunk::Table::Glyf::Compound::WE_HAVE_A_SCALE = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/glyf/compound.rb#13
TTFunk::Table::Glyf::Compound::WE_HAVE_A_TWO_BY_TWO = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/glyf/compound.rb#14
TTFunk::Table::Glyf::Compound::WE_HAVE_INSTRUCTIONS = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/glyf/simple.rb#6
class TTFunk::Table::Glyf::Simple
  # @return [Simple] a new instance of Simple
  #
  # source://ttfunk//lib/ttfunk/table/glyf/simple.rb#11
  def initialize(raw, number_of_contours, x_min, y_min, x_max, y_max); end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/glyf/simple.rb#26
  def compound?; end

  # Returns the value of attribute number_of_contours.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/simple.rb#8
  def number_of_contours; end

  # Returns the value of attribute raw.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/simple.rb#7
  def raw; end

  # source://ttfunk//lib/ttfunk/table/glyf/simple.rb#30
  def recode(mapping); end

  # Returns the value of attribute x_max.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/simple.rb#9
  def x_max; end

  # Returns the value of attribute x_min.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/simple.rb#9
  def x_min; end

  # Returns the value of attribute y_max.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/simple.rb#9
  def y_max; end

  # Returns the value of attribute y_min.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/simple.rb#9
  def y_min; end
end

# source://ttfunk//lib/ttfunk/table/head.rb#5
class TTFunk::Table::Head < ::TTFunk::Table
  # Returns the value of attribute checksum_adjustment.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#8
  def checksum_adjustment; end

  # Returns the value of attribute created.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#12
  def created; end

  # Returns the value of attribute flags.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#10
  def flags; end

  # Returns the value of attribute font_direction_hint.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#20
  def font_direction_hint; end

  # Returns the value of attribute font_revision.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#7
  def font_revision; end

  # Returns the value of attribute glyph_data_format.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#22
  def glyph_data_format; end

  # Returns the value of attribute index_to_loc_format.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#21
  def index_to_loc_format; end

  # Returns the value of attribute lowest_rec_ppem.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#19
  def lowest_rec_ppem; end

  # Returns the value of attribute mac_style.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#18
  def mac_style; end

  # Returns the value of attribute magic_number.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#9
  def magic_number; end

  # Returns the value of attribute modified.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#13
  def modified; end

  # Returns the value of attribute units_per_em.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#11
  def units_per_em; end

  # Returns the value of attribute version.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#6
  def version; end

  # Returns the value of attribute x_max.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#16
  def x_max; end

  # Returns the value of attribute x_min.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#14
  def x_min; end

  # Returns the value of attribute y_max.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#17
  def y_max; end

  # Returns the value of attribute y_min.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#15
  def y_min; end

  private

  # source://ttfunk//lib/ttfunk/table/head.rb#33
  def parse!; end

  class << self
    # source://ttfunk//lib/ttfunk/table/head.rb#24
    def encode(head, loca); end
  end
end

# source://ttfunk//lib/ttfunk/table/hhea.rb#5
class TTFunk::Table::Hhea < ::TTFunk::Table
  # Returns the value of attribute advance_width_max.
  #
  # source://ttfunk//lib/ttfunk/table/hhea.rb#10
  def advance_width_max; end

  # Returns the value of attribute ascent.
  #
  # source://ttfunk//lib/ttfunk/table/hhea.rb#7
  def ascent; end

  # Returns the value of attribute carot_slope_rise.
  #
  # source://ttfunk//lib/ttfunk/table/hhea.rb#14
  def carot_slope_rise; end

  # Returns the value of attribute carot_slope_run.
  #
  # source://ttfunk//lib/ttfunk/table/hhea.rb#15
  def carot_slope_run; end

  # Returns the value of attribute descent.
  #
  # source://ttfunk//lib/ttfunk/table/hhea.rb#8
  def descent; end

  # Returns the value of attribute line_gap.
  #
  # source://ttfunk//lib/ttfunk/table/hhea.rb#9
  def line_gap; end

  # Returns the value of attribute metric_data_format.
  #
  # source://ttfunk//lib/ttfunk/table/hhea.rb#16
  def metric_data_format; end

  # Returns the value of attribute min_left_side_bearing.
  #
  # source://ttfunk//lib/ttfunk/table/hhea.rb#11
  def min_left_side_bearing; end

  # Returns the value of attribute min_right_side_bearing.
  #
  # source://ttfunk//lib/ttfunk/table/hhea.rb#12
  def min_right_side_bearing; end

  # Returns the value of attribute number_of_metrics.
  #
  # source://ttfunk//lib/ttfunk/table/hhea.rb#17
  def number_of_metrics; end

  # Returns the value of attribute version.
  #
  # source://ttfunk//lib/ttfunk/table/hhea.rb#6
  def version; end

  # Returns the value of attribute x_max_extent.
  #
  # source://ttfunk//lib/ttfunk/table/hhea.rb#13
  def x_max_extent; end

  private

  # source://ttfunk//lib/ttfunk/table/hhea.rb#27
  def parse!; end

  class << self
    # source://ttfunk//lib/ttfunk/table/hhea.rb#19
    def encode(hhea, hmtx); end
  end
end

# source://ttfunk//lib/ttfunk/table/hmtx.rb#5
class TTFunk::Table::Hmtx < ::TTFunk::Table
  # source://ttfunk//lib/ttfunk/table/hmtx.rb#22
  def for(glyph_id); end

  # Returns the value of attribute left_side_bearings.
  #
  # source://ttfunk//lib/ttfunk/table/hmtx.rb#7
  def left_side_bearings; end

  # Returns the value of attribute metrics.
  #
  # source://ttfunk//lib/ttfunk/table/hmtx.rb#6
  def metrics; end

  # Returns the value of attribute widths.
  #
  # source://ttfunk//lib/ttfunk/table/hmtx.rb#8
  def widths; end

  private

  # source://ttfunk//lib/ttfunk/table/hmtx.rb#30
  def parse!; end

  class << self
    # source://ttfunk//lib/ttfunk/table/hmtx.rb#10
    def encode(hmtx, mapping); end
  end
end

# source://ttfunk//lib/ttfunk/table/hmtx.rb#20
class TTFunk::Table::Hmtx::HorizontalMetric < ::Struct
  # Returns the value of attribute advance_width
  #
  # @return [Object] the current value of advance_width
  def advance_width; end

  # Sets the attribute advance_width
  #
  # @param value [Object] the value to set the attribute advance_width to.
  # @return [Object] the newly set value
  def advance_width=(_); end

  # Returns the value of attribute left_side_bearing
  #
  # @return [Object] the current value of left_side_bearing
  def left_side_bearing; end

  # Sets the attribute left_side_bearing
  #
  # @param value [Object] the value to set the attribute left_side_bearing to.
  # @return [Object] the newly set value
  def left_side_bearing=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://ttfunk//lib/ttfunk/table/kern.rb#5
class TTFunk::Table::Kern < ::TTFunk::Table
  # Returns the value of attribute tables.
  #
  # source://ttfunk//lib/ttfunk/table/kern.rb#7
  def tables; end

  # Returns the value of attribute version.
  #
  # source://ttfunk//lib/ttfunk/table/kern.rb#6
  def version; end

  private

  # source://ttfunk//lib/ttfunk/table/kern.rb#68
  def add_table(format, attributes = T.unsafe(nil)); end

  # source://ttfunk//lib/ttfunk/table/kern.rb#19
  def parse!; end

  # source://ttfunk//lib/ttfunk/table/kern.rb#32
  def parse_version_0_tables(num_tables); end

  # source://ttfunk//lib/ttfunk/table/kern.rb#55
  def parse_version_1_tables(num_tables); end

  class << self
    # source://ttfunk//lib/ttfunk/table/kern.rb#9
    def encode(kerning, mapping); end
  end
end

# source://ttfunk//lib/ttfunk/table/kern/format0.rb#6
class TTFunk::Table::Kern::Format0
  include ::TTFunk::Reader

  # @return [Format0] a new instance of Format0
  #
  # source://ttfunk//lib/ttfunk/table/kern/format0.rb#12
  def initialize(attributes = T.unsafe(nil)); end

  # Returns the value of attribute attributes.
  #
  # source://ttfunk//lib/ttfunk/table/kern/format0.rb#9
  def attributes; end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/kern/format0.rb#35
  def cross_stream?; end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/kern/format0.rb#31
  def horizontal?; end

  # Returns the value of attribute pairs.
  #
  # source://ttfunk//lib/ttfunk/table/kern/format0.rb#10
  def pairs; end

  # source://ttfunk//lib/ttfunk/table/kern/format0.rb#39
  def recode(mapping); end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/kern/format0.rb#27
  def vertical?; end
end

# source://ttfunk//lib/ttfunk/table/loca.rb#5
class TTFunk::Table::Loca < ::TTFunk::Table
  # source://ttfunk//lib/ttfunk/table/loca.rb#23
  def index_of(glyph_id); end

  # Returns the value of attribute offsets.
  #
  # source://ttfunk//lib/ttfunk/table/loca.rb#6
  def offsets; end

  # source://ttfunk//lib/ttfunk/table/loca.rb#27
  def size_of(glyph_id); end

  private

  # source://ttfunk//lib/ttfunk/table/loca.rb#33
  def parse!; end

  class << self
    # Accepts an array of offsets, with each index corresponding to the
    # glyph id with that index.
    #
    # Returns a hash containing:
    #
    # * :table - the string representing the table's contents
    # * :type  - the type of offset (to be encoded in the 'head' table)
    #
    # source://ttfunk//lib/ttfunk/table/loca.rb#15
    def encode(offsets); end
  end
end

# source://ttfunk//lib/ttfunk/table/maxp.rb#5
class TTFunk::Table::Maxp < ::TTFunk::Table
  # Returns the value of attribute max_component_contours.
  #
  # source://ttfunk//lib/ttfunk/table/maxp.rb#11
  def max_component_contours; end

  # Returns the value of attribute max_component_depth.
  #
  # source://ttfunk//lib/ttfunk/table/maxp.rb#20
  def max_component_depth; end

  # Returns the value of attribute max_component_elements.
  #
  # source://ttfunk//lib/ttfunk/table/maxp.rb#19
  def max_component_elements; end

  # Returns the value of attribute max_component_points.
  #
  # source://ttfunk//lib/ttfunk/table/maxp.rb#10
  def max_component_points; end

  # Returns the value of attribute max_contours.
  #
  # source://ttfunk//lib/ttfunk/table/maxp.rb#9
  def max_contours; end

  # Returns the value of attribute max_function_defs.
  #
  # source://ttfunk//lib/ttfunk/table/maxp.rb#15
  def max_function_defs; end

  # Returns the value of attribute max_instruction_defs.
  #
  # source://ttfunk//lib/ttfunk/table/maxp.rb#16
  def max_instruction_defs; end

  # Returns the value of attribute max_points.
  #
  # source://ttfunk//lib/ttfunk/table/maxp.rb#8
  def max_points; end

  # Returns the value of attribute max_size_of_instructions.
  #
  # source://ttfunk//lib/ttfunk/table/maxp.rb#18
  def max_size_of_instructions; end

  # Returns the value of attribute max_stack_elements.
  #
  # source://ttfunk//lib/ttfunk/table/maxp.rb#17
  def max_stack_elements; end

  # Returns the value of attribute max_storage.
  #
  # source://ttfunk//lib/ttfunk/table/maxp.rb#14
  def max_storage; end

  # Returns the value of attribute max_twilight_points.
  #
  # source://ttfunk//lib/ttfunk/table/maxp.rb#13
  def max_twilight_points; end

  # Returns the value of attribute max_zones.
  #
  # source://ttfunk//lib/ttfunk/table/maxp.rb#12
  def max_zones; end

  # Returns the value of attribute num_glyphs.
  #
  # source://ttfunk//lib/ttfunk/table/maxp.rb#7
  def num_glyphs; end

  # Returns the value of attribute version.
  #
  # source://ttfunk//lib/ttfunk/table/maxp.rb#6
  def version; end

  private

  # source://ttfunk//lib/ttfunk/table/maxp.rb#31
  def parse!; end

  class << self
    # source://ttfunk//lib/ttfunk/table/maxp.rb#22
    def encode(maxp, mapping); end
  end
end

# source://ttfunk//lib/ttfunk/table/name.rb#5
class TTFunk::Table::Name < ::TTFunk::Table
  # Returns the value of attribute compatible_full.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#43
  def compatible_full; end

  # source://ttfunk//lib/ttfunk/table/name.rb#27
  def copyright; end

  # Returns the value of attribute description.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#36
  def description; end

  # Returns the value of attribute designer.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#35
  def designer; end

  # Returns the value of attribute designer_url.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#38
  def designer_url; end

  # Returns the value of attribute font_family.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#28
  def font_family; end

  # Returns the value of attribute font_name.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#31
  def font_name; end

  # Returns the value of attribute font_subfamily.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#29
  def font_subfamily; end

  # source://ttfunk//lib/ttfunk/table/name.rb#39
  def license; end

  # source://ttfunk//lib/ttfunk/table/name.rb#40
  def license_url; end

  # Returns the value of attribute manufacturer.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#34
  def manufacturer; end

  # source://ttfunk//lib/ttfunk/table/name.rb#71
  def postscript_name; end

  # Returns the value of attribute preferred_family.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#41
  def preferred_family; end

  # Returns the value of attribute preferred_subfamily.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#42
  def preferred_subfamily; end

  # Returns the value of attribute sample_text.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#44
  def sample_text; end

  # Returns the value of attribute strings.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#25
  def strings; end

  # Returns the value of attribute trademark.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#33
  def trademark; end

  # Returns the value of attribute unique_subfamily.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#30
  def unique_subfamily; end

  # Returns the value of attribute vendor_url.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#37
  def vendor_url; end

  # Returns the value of attribute version.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#32
  def version; end

  private

  # source://ttfunk//lib/ttfunk/table/name.rb#78
  def parse!; end

  class << self
    # source://ttfunk//lib/ttfunk/table/name.rb#48
    def encode(names); end
  end
end

# source://ttfunk//lib/ttfunk/table/name.rb#6
class TTFunk::Table::Name::String < ::String
  # @return [String] a new instance of String
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#11
  def initialize(text, platform_id, encoding_id, language_id); end

  # Returns the value of attribute encoding_id.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#8
  def encoding_id; end

  # Returns the value of attribute language_id.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#9
  def language_id; end

  # Returns the value of attribute platform_id.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#7
  def platform_id; end

  # source://ttfunk//lib/ttfunk/table/name.rb#18
  def strip_extended; end
end

# source://ttfunk//lib/ttfunk/table/os2.rb#5
class TTFunk::Table::OS2 < ::TTFunk::Table
  # Returns the value of attribute ascent.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#30
  def ascent; end

  # Returns the value of attribute ave_char_width.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#8
  def ave_char_width; end

  # Returns the value of attribute break_char.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#40
  def break_char; end

  # Returns the value of attribute cap_height.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#38
  def cap_height; end

  # Returns the value of attribute char_range.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#24
  def char_range; end

  # Returns the value of attribute code_page_range.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#35
  def code_page_range; end

  # Returns the value of attribute default_char.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#39
  def default_char; end

  # Returns the value of attribute descent.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#31
  def descent; end

  # Returns the value of attribute family_class.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#22
  def family_class; end

  # Returns the value of attribute first_char_index.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#27
  def first_char_index; end

  # Returns the value of attribute last_char_index.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#28
  def last_char_index; end

  # Returns the value of attribute line_gap.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#32
  def line_gap; end

  # Returns the value of attribute max_context.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#41
  def max_context; end

  # Returns the value of attribute panose.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#23
  def panose; end

  # Returns the value of attribute selection.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#26
  def selection; end

  # source://ttfunk//lib/ttfunk/table/os2.rb#43
  def tag; end

  # Returns the value of attribute type.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#11
  def type; end

  # Returns the value of attribute vendor_id.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#25
  def vendor_id; end

  # Returns the value of attribute version.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#6
  def version; end

  # Returns the value of attribute weight_class.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#9
  def weight_class; end

  # Returns the value of attribute width_class.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#10
  def width_class; end

  # Returns the value of attribute win_ascent.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#33
  def win_ascent; end

  # Returns the value of attribute win_descent.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#34
  def win_descent; end

  # Returns the value of attribute x_height.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#37
  def x_height; end

  # Returns the value of attribute y_strikeout_position.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#21
  def y_strikeout_position; end

  # Returns the value of attribute y_strikeout_size.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#20
  def y_strikeout_size; end

  # Returns the value of attribute y_subscript_x_offset.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#14
  def y_subscript_x_offset; end

  # Returns the value of attribute y_subscript_x_size.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#12
  def y_subscript_x_size; end

  # Returns the value of attribute y_subscript_y_offset.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#15
  def y_subscript_y_offset; end

  # Returns the value of attribute y_subscript_y_size.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#13
  def y_subscript_y_size; end

  # Returns the value of attribute y_superscript_x_offset.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#18
  def y_superscript_x_offset; end

  # Returns the value of attribute y_superscript_x_size.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#16
  def y_superscript_x_size; end

  # Returns the value of attribute y_superscript_y_offset.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#19
  def y_superscript_y_offset; end

  # Returns the value of attribute y_superscript_y_size.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#17
  def y_superscript_y_size; end

  private

  # source://ttfunk//lib/ttfunk/table/os2.rb#49
  def parse!; end
end

# source://ttfunk//lib/ttfunk/table/post.rb#5
class TTFunk::Table::Post < ::TTFunk::Table
  # Returns the value of attribute fixed_pitch.
  #
  # source://ttfunk//lib/ttfunk/table/post.rb#10
  def fixed_pitch; end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/post.rb#23
  def fixed_pitch?; end

  # Returns the value of attribute format.
  #
  # source://ttfunk//lib/ttfunk/table/post.rb#6
  def format; end

  # source://ttfunk//lib/ttfunk/table/post.rb#27
  def glyph_for(code); end

  # Returns the value of attribute italic_angle.
  #
  # source://ttfunk//lib/ttfunk/table/post.rb#7
  def italic_angle; end

  # Returns the value of attribute max_mem_type1.
  #
  # source://ttfunk//lib/ttfunk/table/post.rb#14
  def max_mem_type1; end

  # Returns the value of attribute max_mem_type42.
  #
  # source://ttfunk//lib/ttfunk/table/post.rb#12
  def max_mem_type42; end

  # Returns the value of attribute min_mem_type1.
  #
  # source://ttfunk//lib/ttfunk/table/post.rb#13
  def min_mem_type1; end

  # Returns the value of attribute min_mem_type42.
  #
  # source://ttfunk//lib/ttfunk/table/post.rb#11
  def min_mem_type42; end

  # source://ttfunk//lib/ttfunk/table/post.rb#31
  def recode(mapping); end

  # Returns the value of attribute subtable.
  #
  # source://ttfunk//lib/ttfunk/table/post.rb#16
  def subtable; end

  # Returns the value of attribute underline_position.
  #
  # source://ttfunk//lib/ttfunk/table/post.rb#8
  def underline_position; end

  # Returns the value of attribute underline_thickness.
  #
  # source://ttfunk//lib/ttfunk/table/post.rb#9
  def underline_thickness; end

  private

  # source://ttfunk//lib/ttfunk/table/post.rb#61
  def parse!; end

  # source://ttfunk//lib/ttfunk/table/post.rb#83
  def parse_format!; end

  class << self
    # source://ttfunk//lib/ttfunk/table/post.rb#18
    def encode(post, mapping); end
  end
end

# source://ttfunk//lib/ttfunk/table/post/format10.rb#4
module TTFunk::Table::Post::Format10
  # source://ttfunk//lib/ttfunk/table/post/format10.rb#31
  def glyph_for(code); end

  private

  # source://ttfunk//lib/ttfunk/table/post/format10.rb#37
  def parse_format!; end
end

# source://ttfunk//lib/ttfunk/table/post/format10.rb#5
TTFunk::Table::Post::Format10::POSTSCRIPT_GLYPHS = T.let(T.unsafe(nil), Array)

# source://ttfunk//lib/ttfunk/table/post/format20.rb#7
module TTFunk::Table::Post::Format20
  include ::TTFunk::Table::Post::Format10

  # source://ttfunk//lib/ttfunk/table/post/format20.rb#10
  def glyph_for(code); end

  private

  # source://ttfunk//lib/ttfunk/table/post/format20.rb#21
  def parse_format!; end
end

# source://ttfunk//lib/ttfunk/table/post/format30.rb#4
module TTFunk::Table::Post::Format30
  # source://ttfunk//lib/ttfunk/table/post/format30.rb#5
  def glyph_for(code); end

  private

  # source://ttfunk//lib/ttfunk/table/post/format30.rb#11
  def parse_format!; end
end

# source://ttfunk//lib/ttfunk/table/post/format40.rb#4
module TTFunk::Table::Post::Format40
  # source://ttfunk//lib/ttfunk/table/post/format40.rb#5
  def glyph_for(code); end

  private

  # source://ttfunk//lib/ttfunk/table/post/format40.rb#11
  def parse_format!; end
end

# source://ttfunk//lib/ttfunk/table/sbix.rb#5
class TTFunk::Table::Sbix < ::TTFunk::Table
  # source://ttfunk//lib/ttfunk/table/sbix.rb#32
  def all_bitmap_data_for(glyph_id); end

  # source://ttfunk//lib/ttfunk/table/sbix.rb#13
  def bitmap_data_for(glyph_id, strike_index); end

  # Returns the value of attribute flags.
  #
  # source://ttfunk//lib/ttfunk/table/sbix.rb#7
  def flags; end

  # Returns the value of attribute num_strikes.
  #
  # source://ttfunk//lib/ttfunk/table/sbix.rb#8
  def num_strikes; end

  # Returns the value of attribute strikes.
  #
  # source://ttfunk//lib/ttfunk/table/sbix.rb#9
  def strikes; end

  # Returns the value of attribute version.
  #
  # source://ttfunk//lib/ttfunk/table/sbix.rb#6
  def version; end

  private

  # source://ttfunk//lib/ttfunk/table/sbix.rb#40
  def parse!; end
end

# source://ttfunk//lib/ttfunk/table/sbix.rb#11
class TTFunk::Table::Sbix::BitmapData < ::Struct
  # Returns the value of attribute data
  #
  # @return [Object] the current value of data
  def data; end

  # Sets the attribute data
  #
  # @param value [Object] the value to set the attribute data to.
  # @return [Object] the newly set value
  def data=(_); end

  # Returns the value of attribute ppem
  #
  # @return [Object] the current value of ppem
  def ppem; end

  # Sets the attribute ppem
  #
  # @param value [Object] the value to set the attribute ppem to.
  # @return [Object] the newly set value
  def ppem=(_); end

  # Returns the value of attribute resolution
  #
  # @return [Object] the current value of resolution
  def resolution; end

  # Sets the attribute resolution
  #
  # @param value [Object] the value to set the attribute resolution to.
  # @return [Object] the newly set value
  def resolution=(_); end

  # Returns the value of attribute type
  #
  # @return [Object] the current value of type
  def type; end

  # Sets the attribute type
  #
  # @param value [Object] the value to set the attribute type to.
  # @return [Object] the newly set value
  def type=(_); end

  # Returns the value of attribute x
  #
  # @return [Object] the current value of x
  def x; end

  # Sets the attribute x
  #
  # @param value [Object] the value to set the attribute x to.
  # @return [Object] the newly set value
  def x=(_); end

  # Returns the value of attribute y
  #
  # @return [Object] the current value of y
  def y; end

  # Sets the attribute y
  #
  # @param value [Object] the value to set the attribute y to.
  # @return [Object] the newly set value
  def y=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://ttfunk//lib/ttfunk/table/simple.rb#5
class TTFunk::Table::Simple < ::TTFunk::Table
  # @return [Simple] a new instance of Simple
  #
  # source://ttfunk//lib/ttfunk/table/simple.rb#8
  def initialize(file, tag); end

  # Returns the value of attribute tag.
  #
  # source://ttfunk//lib/ttfunk/table/simple.rb#6
  def tag; end
end
