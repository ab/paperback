# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/pdf-core/all/pdf-core.rbi
#
# pdf-core-0.4.0
module PDF
end
module PDF::Core
  def PdfObject(obj, in_content_stream = nil); end
  def Reference(*args, &block); end
  def self.PdfObject(obj, in_content_stream = nil); end
  def self.Reference(*args, &block); end
  def self.string_to_hex(str); end
  def self.utf8_to_utf16(str); end
  def string_to_hex(str); end
  def utf8_to_utf16(str); end
end
module PDF::Core::Annotations
  def annotate(options); end
  def link_annotation(rect, options = nil); end
  def sanitize_annotation_hash(options); end
  def text_annotation(rect, contents, options = nil); end
end
class PDF::Core::ByteString < String
end
module PDF::Core::Destinations
  def add_dest(name, reference); end
  def dest_fit(dest_page = nil); end
  def dest_fit_bounds(dest_page = nil); end
  def dest_fit_bounds_horizontally(top, dest_page = nil); end
  def dest_fit_bounds_vertically(left, dest_page = nil); end
  def dest_fit_horizontally(top, dest_page = nil); end
  def dest_fit_rect(left, bottom, right, top, dest_page = nil); end
  def dest_fit_vertically(left, dest_page = nil); end
  def dest_xyz(left, top, zoom = nil, dest_page = nil); end
  def dests; end
end
module PDF::Core::Filters
end
module PDF::Core::Filters::FlateDecode
  def self.decode(stream, params = nil); end
  def self.encode(stream, params = nil); end
end
module PDF::Core::Filters::DCTDecode
  def self.decode(stream, params = nil); end
  def self.encode(stream, params = nil); end
end
class PDF::Core::Stream
  def <<(io); end
  def compress!; end
  def compressed?; end
  def data; end
  def empty?; end
  def filtered_stream; end
  def filters; end
  def initialize(io = nil); end
  def inspect; end
  def length; end
  def object; end
end
class PDF::Core::Reference
  def <<(io); end
  def data; end
  def data=(arg0); end
  def deep_copy(share = nil); end
  def gen; end
  def gen=(arg0); end
  def identifier; end
  def identifier=(arg0); end
  def initialize(id, data); end
  def object; end
  def offset; end
  def offset=(arg0); end
  def replace(other_ref); end
  def stream; end
  def stream=(arg0); end
  def to_s; end
end
class PDF::Core::LiteralString < String
end
class PDF::Core::FilterList
  def <<(filter); end
  def decode_params; end
  def each(&block); end
  def initialize; end
  def inspect; end
  def names; end
  def normalized; end
  def to_a; end
end
class PDF::Core::GraphicStateStack
  def current_state; end
  def empty?; end
  def initialize(previous_state = nil); end
  def present?; end
  def restore_graphic_state; end
  def save_graphic_state(graphic_state = nil); end
  def stack; end
  def stack=(arg0); end
end
class PDF::Core::GraphicState
  def cap_style; end
  def cap_style=(arg0); end
  def color_space; end
  def color_space=(arg0); end
  def dash; end
  def dash=(arg0); end
  def dash_setting; end
  def fill_color; end
  def fill_color=(arg0); end
  def initialize(previous_state = nil); end
  def initialize_copy(other); end
  def join_style; end
  def join_style=(arg0); end
  def line_width; end
  def line_width=(arg0); end
  def stroke_color; end
  def stroke_color=(arg0); end
end
class PDF::Core::Page
  def content; end
  def content=(arg0); end
  def dictionary; end
  def dictionary=(arg0); end
  def dimensions; end
  def document; end
  def document=(arg0); end
  def ext_gstates; end
  def finalize; end
  def fonts; end
  def graphic_state; end
  def imported_page?; end
  def in_stamp_stream?; end
  def inherited_dictionary_value(key, local_dict = nil); end
  def init_from_object(options); end
  def init_new_page(options); end
  def initialize(document, options = nil); end
  def layout; end
  def margins; end
  def margins=(arg0); end
  def resources; end
  def size; end
  def stack; end
  def stack=(arg0); end
  def stamp_stream(dictionary); end
  def xobjects; end
end
class PDF::Core::ObjectStore
  def <<(*args, &block); end
  def [](id); end
  def each; end
  def info; end
  def initialize(opts = nil); end
  def is_utf8?(str); end
  def length; end
  def min_version; end
  def object_id_for_page(k); end
  def page_count; end
  def pages; end
  def push(*args, &block); end
  def ref(data, &block); end
  def root; end
  def size; end
  include Enumerable
end
class PDF::Core::DocumentState
  def before_render_actions(doc); end
  def before_render_callbacks; end
  def before_render_callbacks=(arg0); end
  def compress; end
  def compress=(arg0); end
  def encrypt; end
  def encrypt=(arg0); end
  def encryption_key; end
  def encryption_key=(arg0); end
  def initialize(options); end
  def insert_page(page, page_number); end
  def normalize_metadata(options); end
  def on_page_create_action(doc); end
  def on_page_create_callback; end
  def on_page_create_callback=(arg0); end
  def page; end
  def page=(arg0); end
  def page_count; end
  def pages; end
  def pages=(arg0); end
  def populate_pages_from_store(document); end
  def render_body(output); end
  def skip_encoding; end
  def skip_encoding=(arg0); end
  def store; end
  def store=(arg0); end
  def trailer; end
  def trailer=(arg0); end
  def version; end
  def version=(arg0); end
end
module PDF::Core::NameTree
end
class PDF::Core::NameTree::Node
  def <<(value); end
  def >=(value); end
  def add(name, value); end
  def children; end
  def deep_copy; end
  def document; end
  def empty?; end
  def greatest; end
  def initialize(document, limit, parent = nil); end
  def insertion_point(value); end
  def leaf?; end
  def least; end
  def limit; end
  def new_node(parent = nil); end
  def parent; end
  def parent=(arg0); end
  def ref; end
  def ref=(arg0); end
  def size; end
  def split!; end
  def split(node); end
  def split_children(node, left, right); end
  def to_hash; end
end
class PDF::Core::NameTree::Value
  def <=>(leaf); end
  def initialize(name, value); end
  def inspect; end
  def name; end
  def to_s; end
  def value; end
  include Comparable
end
module PDF::Core::PageGeometry
end
class PDF::Core::OutlineRoot
  def count; end
  def count=(arg0); end
  def first; end
  def first=(arg0); end
  def initialize; end
  def last; end
  def last=(arg0); end
  def to_hash; end
end
class PDF::Core::OutlineItem
  def closed; end
  def closed=(arg0); end
  def count; end
  def count=(arg0); end
  def dest; end
  def dest=(arg0); end
  def first; end
  def first=(arg0); end
  def initialize(title, parent, options); end
  def last; end
  def last=(arg0); end
  def next; end
  def next=(arg0); end
  def parent; end
  def parent=(arg0); end
  def prev; end
  def prev=(arg0); end
  def title; end
  def title=(arg0); end
  def to_hash; end
end
class PDF::Core::Renderer
  def add_content(str); end
  def before_render(&block); end
  def close_graphics_state; end
  def compression_enabled?; end
  def deref(obj); end
  def finalize_all_page_contents; end
  def go_to_page(k); end
  def graphic_stack; end
  def graphic_state; end
  def initialize(state); end
  def min_version(min); end
  def names; end
  def names?; end
  def on_page_create(&block); end
  def open_graphics_state; end
  def page_count; end
  def ref!(data); end
  def ref(data); end
  def render(output = nil); end
  def render_body(output); end
  def render_file(filename); end
  def render_header(output); end
  def render_trailer(output); end
  def render_xref(output); end
  def restore_graphics_state; end
  def save_graphics_state(graphic_state = nil); end
  def start_new_page(options = nil); end
  def state; end
end
module PDF::Core::Errors
end
class PDF::Core::Errors::FailedObjectConversion < StandardError
end
class PDF::Core::Errors::EmptyGraphicStateStack < StandardError
end
class PDF::Core::Errors::InvalidPageLayout < StandardError
end
module PDF::Core::Text
  def add_text_content(text, x, y, options); end
  def character_spacing(amount = nil); end
  def default_kerning(boolean); end
  def default_kerning=(boolean); end
  def default_kerning?; end
  def default_leading(number = nil); end
  def default_leading=(number = nil); end
  def fallback_fonts(fallback_fonts = nil); end
  def fallback_fonts=(fallback_fonts = nil); end
  def forget_text_rendering_mode!; end
  def process_text_options(options); end
  def skip_encoding; end
  def text_direction(direction = nil); end
  def text_direction=(direction = nil); end
  def text_rendering_mode(mode = nil); end
  def word_spacing(amount = nil); end
end
